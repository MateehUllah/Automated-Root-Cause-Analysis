import os
import requests

API_TOKEN = os.environ.get('HUGGINGFACEHUB_API_TOKEN')
API_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"

def _clean_response(generated_text, prompt):
    """
    Cleans the generated text by removing the specified prompt and any special tokens.

    Args:
        generated_text (str): The text generated by the model which may contain the prompt and special tokens.
        prompt (str): The prompt text that needs to be removed from the generated text.

    Returns:
        str: A cleaned version of the generated text with the prompt and special tokens removed.
    """
    cleaned = generated_text.replace(prompt, "").strip()
    cleaned = cleaned.replace("<s>", "").replace("</s>", "").strip()   
    return "\n".join([line.strip() for line in cleaned.split("\n") if line.strip()])

def generate_network_failure_recommendations(network_data, weather_data):
    """
    Generates network failure recommendations based on network performance metrics and weather conditions.

    Args:
        network_data (dict): Dictionary containing key network metrics.
            - Packet_Loss (float): Packet loss percentage.
            - Latency (float): Latency in milliseconds.
            - Jitter (float): Jitter in milliseconds.
            - Bandwidth_Usage (float): Bandwidth usage in percentage.
        weather_data (dict): Dictionary containing real-time weather conditions.
            - Temperature (float): Temperature in Celsius.
            - Humidity (float): Humidity percentage.
            - Condition (str): Weather condition (e.g., Rain, Storm, Clear).
    Returns:
        str: A string containing three specific recommendations to mitigate network failure risks.
    """

    prompt = f"""
    Analyze the following network and weather data to assess potential network failures:

    - Network Metrics:
      - Packet Loss: {network_data['Packet_Loss']}%
      - Latency: {network_data['Latency']} ms
      - Jitter: {network_data['Jitter']} ms
      - Bandwidth Usage: {network_data['Bandwidth_Usage']}%

    - Weather Conditions:
      - Temperature: {weather_data['temperature']}Â°C
      - Humidity: {weather_data['humidity']}%
      - Condition: {weather_data['condition']}

    Given this data, provide **three specific recommendations** to prevent or mitigate network failures. 
    Format the recommendations as a **numbered list** with no extra commentary.
    """

    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 300,
            "temperature": 0.7,
            "return_full_text": False 
        }
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    generated_text = response.json()[0]['generated_text']
    return _clean_response(generated_text, prompt)
